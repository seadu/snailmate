#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'singleton'
require 'strscan'

module Namae
  class Parser < Racc::Parser

module_eval(<<'...end namae.y/module_eval...', 'namae.y', 135)

  include Singleton

  attr_reader :options, :input

  def initialize
    @input, @options = StringScanner.new(''), {
      :debug => false,
      :prefer_comma_as_separator => false,
      :comma => ',',
      :stops => ',;',
      :separator => /\s*(\band\b|\&|;)\s*/i,
      :title => /\s*\b(sir|lord|count(ess)?|(gen|adm|col|maj|capt|cmdr|lt|sgt|cpl|pvt|prof|dr|md|ph\.?d)\.?)(\s+|$)/i,
      :suffix => /\s*\b(JR|Jr|jr|SR|Sr|sr|[IVX]{2,})(\.|\b)/,
      :appellation => /\s*\b((mrs?|ms|fr|hr)\.?|miss|herr|frau)(\s+|$)/i
    }
  end

  def debug?
    options[:debug] || ENV['DEBUG']
  end

  def separator
    options[:separator]
  end

  def comma
    options[:comma]
  end

  def stops
    options[:stops]
  end

  def title
    options[:title]
  end

  def suffix
    options[:suffix]
  end

  def appellation
    options[:appellation]
  end

  def prefer_comma_as_separator?
    options[:prefer_comma_as_separator]
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    []
  end

  def parse!(string)
    input.string = normalize(string)
    reset
    do_parse
  end

  def normalize(string)
    string = string.strip
    string
  end

  def reset
    @commas, @words, @initials, @suffices, @yydebug = 0, 0, 0, 0, debug?
    self
  end

  private

  def stack
    @vstack || @racc_vstack || []
  end

  def last_token
    stack[-1]
  end

  def consume_separator
    return next_token if seen_separator?
    @commas, @words, @initials, @suffices = 0, 0, 0, 0
    [:AND, :AND]
  end

  def consume_comma
    @commas += 1
    [:COMMA, :COMMA]
  end

  def consume_word(type, word)
    @words += 1

    case type
    when :UWORD
      @initials += 1 if word =~ /^[[:upper:]]+\b/
    when :SUFFIX
      @suffices += 1
    end

    [type, word]
  end

  def seen_separator?
    !stack.empty? && last_token == :AND
  end

  def suffix?
    !@suffices.zero? || will_see_suffix?
  end

  def will_see_suffix?
    input.peek(8).to_s.strip.split(/\s+/)[0] =~ suffix
  end

  def will_see_initial?
    input.peek(6).to_s.strip.split(/\s+/)[0] =~ /^[[:upper:]]+\b/
  end

  def seen_full_name?
    prefer_comma_as_separator? && @words > 1 &&
      (@initials > 0 || !will_see_initial?) && !will_see_suffix?
  end

  def next_token
    case
    when input.nil?, input.eos?
      nil
    when input.scan(separator)
      consume_separator
    when input.scan(/\s*#{comma}\s*/)
      if @commas.zero? && !seen_full_name? || @commas == 1 && suffix?
        consume_comma
      else
        consume_separator
      end
    when input.scan(/\s+/)
      next_token
    when input.scan(title)
      consume_word(:TITLE, input.matched.strip)
    when input.scan(suffix)
      consume_word(:SUFFIX, input.matched.strip)
    when input.scan(appellation)
      [:APPELLATION, input.matched.strip]
    when input.scan(/((\\\w+)?\{[^\}]*\})*[[:upper:]][^\s#{stops}]*/)
      consume_word(:UWORD, input.matched)
    when input.scan(/((\\\w+)?\{[^\}]*\})*[[:lower:]][^\s#{stops}]*/)
      consume_word(:LWORD, input.matched)
    when input.scan(/(\\\w+)?\{[^\}]*\}[^\s#{stops}]*/)
      consume_word(:PWORD, input.matched)
    when input.scan(/('[^'\n]+')|("[^"\n]+")/)
      consume_word(:NICK, input.matched[1...-1])
    else
      raise ArgumentError,
        "Failed to parse name #{input.string.inspect}: unmatched data at offset #{input.pos}"
    end
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "Failed to parse name: unexpected '#{value}' at #{stack.inspect}"
  end

# -*- racc -*-
...end namae.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -39,    16,    32,    30,   -40,    31,    33,   -39,    17,   -39,
   -39,   -40,    67,   -40,   -40,    66,    53,    52,    54,   -38,
    59,   -22,    39,   -34,    45,    58,   -38,    53,    52,    54,
    53,    52,    54,    59,    39,    39,    62,    39,    53,    52,
    54,    14,    12,    15,    68,    39,     7,     8,    14,    12,
    15,    58,    39,     7,     8,    14,    22,    15,    24,    14,
    22,    15,    24,    14,    22,    15,    30,    28,    31,    30,
    28,    31,   -19,   -19,   -19,    30,    42,    31,    30,    28,
    31,   -20,   -20,   -20,    30,    46,    31,    30,    28,    31,
    30,    28,    31,   -19,   -19,   -19,    53,    52,    54,    53,
    52,    54,    39,    58,    59 ]

racc_action_check = [
    14,     1,    11,    43,    15,    43,    16,    14,     1,    14,
    14,    15,    50,    15,    15,    49,    49,    49,    49,    12,
    50,    12,    23,    49,    27,    37,    12,    32,    32,    32,
    45,    45,    45,    38,    32,    40,    44,    45,    62,    62,
    62,     0,     0,     0,    57,    62,     0,     0,    17,    17,
    17,    60,    61,    17,    17,     9,     9,     9,     9,    20,
    20,    20,    20,     5,     5,     5,    10,    10,    10,    21,
    21,    21,    22,    22,    22,    24,    24,    24,    25,    25,
    25,    28,    28,    28,    29,    29,    29,    35,    35,    35,
    41,    41,    41,    42,    42,    42,    67,    67,    67,    73,
    73,    73,    64,    70,    72 ]

racc_action_pointer = [
    38,     1,   nil,   nil,   nil,    60,   nil,   nil,   nil,    52,
    63,     0,    19,   nil,     0,     4,     6,    45,   nil,   nil,
    56,    66,    69,    12,    72,    75,   nil,    22,    78,    81,
   nil,   nil,    24,   nil,   nil,    84,   nil,    16,    23,   nil,
    25,    87,    90,     0,    34,    27,   nil,   nil,   nil,    13,
    10,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,
    42,    42,    35,   nil,    92,   nil,   nil,    93,   nil,   nil,
    94,   nil,    94,    96,   nil ]

racc_action_default = [
    -1,   -49,    -2,    -4,    -5,   -49,    -8,    -9,   -10,   -23,
   -49,   -49,   -19,   -28,   -30,   -31,   -49,   -49,    -6,    -7,
   -49,   -4