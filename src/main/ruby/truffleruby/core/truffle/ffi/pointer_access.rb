# frozen_string_literal: true

# Copyright (c) 2018, 2023 Oracle and/or its affiliates. All rights reserved. This
# code is released under a tri EPL/GPL/LGPL license. You can use it,
# redistribute it and/or modify it under the terms of the:
#
# Eclipse Public License version 2.0, or
# GNU General Public License version 2, or
# GNU Lesser General Public License version 2.1.

# Copyright (c) 2007-2015, Evan Phoenix and contributors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Rubinius nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Generated by tool/generate-pointer-methods.rb

class Truffle::FFI::Pointer
  # char, int8

  def read_char
    check_bounds(0, 1)
    Primitive.pointer_read_char address
  end
  alias_method :read_int8, :read_char

  def write_char(value)
    check_bounds(0, 1)
    Primitive.pointer_write_char address, Primitive.rb_to_int(value)
    self
  end
  alias_method :write_int8, :write_char

  def get_char(offset)
    check_bounds(offset, 1)
    Primitive.pointer_read_char address + offset
  end
  alias_method :get_int8, :get_char

  def put_char(offset, value)
    check_bounds(offset, 1)
    Primitive.pointer_write_char address + offset, Primitive.rb_to_int(value)
    self
  end
  alias_method :put_int8, :put_char

  def read_array_of_char(length)
    check_bounds(0, length * 1)
    Array.new(length) do |i|
      Primitive.pointer_read_char address + (i * 1)
    end
  end
  alias_method :read_array_of_int8, :read_array_of_char

  def write_array_of_char(ary)
    Truffle::Type.rb_check_type(ary, ::Array)
    check_bounds(0, ary.size * 1)
    ary.each_with_index do |value, i|
      Primitive.pointer_write_char address + (i * 1), Primitive.rb_to_int(value)
    end
    self
  end
  alias_method :write_array_of_int8, :write_array_of_char

  def get_array_of_char(offset, length)
    (self + offset).read_array_of_char(length)
  end
  alias_method :get_array_of_int8, :get_array_of_char

  def put_array_of_char(offset, ary)
    (self + offset).write_array_of_char(ary)
    self
  end
  alias_method :put_array_of_int8, :put_array_of_char

  # uchar, uint8

  def read_uchar
    check_bounds(0, 1)
    Primitive.pointer_read_uchar address
  end
  alias_method :read_uint8, :read_uchar

  def write_uchar(value)
    check_bounds(0, 1)
    Primitive.pointer_write_uchar address, Primitive.rb_to_int(value)
    self
  end
  alias_method :write_uint8, :write_uchar

  def get_uchar(offset)
    check_bounds(offset, 1)
    Primitive.pointer_read_uchar address + offset
  end
  alias_method :get_uint8, :get_uchar

  def put_uchar(offset, value)
    check_bounds(offset, 1)
    Primitive.pointer_write_uchar address + offset, Primitive.rb_to_int(value)
    self
  end
  alias_method :put_uint8, :put_uchar

  def read_array_of_uchar(length)
    check_bounds(0, length * 1)
    Array.new(length) do |i|
      Primitive.pointer_read_uchar address + (i * 1)
    end
  end
  alias_method :read_array_of_uint8, :read_array_of_uchar

  def write_array_of_uchar(ary)
    Truffle::Type.rb_check_type(ary, ::Array)
    check_bounds(0, ary.size * 1)
    ary.each_with_index do |value, i|
      Primitive.pointer_write_uchar address + (i * 1), Primitive.rb_to_int(value)
    end
    self
  end
  alias_method :write_array_of_uint8, :write_array_of_uchar

  def get_array_of_uchar(offset, length)
    (self + offset).read_array_of_uchar(length)
  end
  alias_method :get_array_of_uint8, :get_array_of_uchar

  def put_array_of_uchar(offset, ary)
    (self + offset).write_array_of_uchar(ary)
    self
  end
  alias_method :put_array_of_uint8, :put_array_of_uchar

  # short, int16

  def read_short
    check_bounds(0, 2)
    Primitive.pointer_read_short address
  end
  alias_method :read_int16, :read_short

  def write_short(value)
    check_bounds(0, 2)
    Primitive.pointer_write_short address, Primitive.rb_to_int(value)
    self
  end
  alias_method :write_int16, :write_short

  def get_short(offset)
    check_bounds(offset, 2)
    Primitive.pointer_read_short address + offset
  end
  alias_method :get_int16, :get_short

  def put_short(offset, value)
    check_bounds(offset, 2)
    Primitive.pointer_write_short address + offset, Primitive.rb_to_int(value)
    self
  end
  alias_method :put_int16, :put_short

  def read_array_of_short(length)
    check_bounds(0, length * 2)
    Array.new(length) do |i|
      Primitive.pointer_read_short address + (i * 2)
    end
  end
  alias_method :read_array_of_int16, :read_array_of_short

  def write_array_of_short(ary)
    Truffle::Type.rb_check_type(ary, ::Array)
    check_bounds(0, ary.size * 2)
    ary.each_with_index do |value, i|
      Primitive.pointer_write_short address + (i * 2), Primitive.rb_to_int(value)
    end
    self
  end
  alias_method :write_array_of_int16, :write_array_of_short

  def get_array_of_short(offset, length)
    (self + offset).read_array_of_short(length)
  end
  alias_method :get_array_of_int16, :get_array_of_short

  def put_array_of_short(offset, ary)
    (self + offset).write_array_of_short(ary)
    self
  end
  alias_method :put_array_of_int16, :put_array_of_short

  # ushort, uint16

  def read_ushort
    check_bounds(0, 2)
    Primitive.pointer_read_ushort address
  end
  alias_method :read_uint16, :read_ushort

  def write_ushort(value)
    check_bounds(0, 2)
    Primitive.pointer_write_ushort address, Primitive.rb_to_int(value)
    self
  end
  alias_method :write_uint16, :write_ushort

  def get_ushort(offset)
    check_bounds(offset, 2)
    Primitive.pointer_read_ushort address + offset
  end
  alias_method :get_uint16, :get_ushort

  def put_ushort(offset, value)
    check_bounds(offset, 2)
    Primitive.pointer_write_ushort address + offset, Primitive.rb_to_int(value)
    self
  end
  alias_method :put_uint16, :put_ushort

  def read_array_of_ushort(length)
    check_bounds(0, length * 2)
    Array.new(length) do |i|
      Primitive.pointer_read_ushort address + (i * 2)
    end
  end
  alias_method :read_array_of_uint16, :read_array_of_ushort

  def write_array_of_ushort(ary)
    Truffle::Type.rb_check_type(ary, ::Array)
    check_bounds(0, ary.size * 2)
    ary.each_with_index do |value, i|
      Primitive.pointer_write_ushort address + (i * 2), Primitive.rb_to_int(value)
    end
    self
  end
  alias_method :write_array_of_uint16, :write_array_of_ushort

  def get_array_of_ushort(offset, length)
    (self + offset).read_array_of_ushort(length)
  end
  alias_method :get_array_of_uint16, :get_array_of_ushort

  def put_array_of_ushort(offset, ary)
    (self + offset).write_array_of_ushort(ary)
    self
  end
  alias_method :put_array_of_uint16, :put_array_of_ushort

  # int, int32

  def read_int
    check_bounds(0, 4)
    Primitive.pointer_read_int address
  end
  alias_method :read_int32, :read_int

  def write_int(value)
    check_bounds(0, 4)
    Primitive.pointer_write_int address, Primitive.rb_to_int(value)
    self
  end
  alias_method :write_int32, :write_int

  def get_int(offset)
    check_bounds(offset, 4)
    Primitive.pointer_read_int address + offset
  end
  al